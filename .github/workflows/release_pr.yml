name: Release Pull Request

on:
  issue_comment:
    types: created

jobs:
  prepare_release:
    if: |
      startsWith(github.event.comment.body, '/release')
      && (contains(github.event.comment.author_association, 'MEMBER')
          || contains(github.event.comment.author_association, 'OWNER')
          || contains(github.event.comment.author_association, 'COLLABORATOR'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set GitHub user
        env:
          GIT_USER: ${{secrets.GIT_USER}}
          GIT_EMAIL: ${{secrets.GIT_EMAIL}}
        run: |
          git config --local user.name "${GIT_USER}"
          git config --local user.email "${GIT_EMAIL}"
      - name: Checkout PR branch
        id: checkout
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            console.log(pr.data);
            core.exportVariable("PR_HEAD_REF", pr.data.head.ref);

            const result = await github.request("POST /repos/:owner/:repo/statuses/:sha", {
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          sha: pr.data.head.ref,
                          context: 'release / changelog',
                          state: 'pending',
            });

            core.exportVariable("PR_HEAD_REF", pr.data.head.ref);

            const result = await github.request("POST /repos/:owner/:repo/statuses/:sha", {
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          sha: pr.data.head.ref,
                          context: 'release / changelog',
                          state: 'pending',
            });

            core.exportVariable("PR_HEAD_REF", pr.data.head.sha);

            const result = await github.request("POST /repos/:owner/:repo/statuses/:sha", {
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          sha: pr.data.head.sha,
                          context: 'release / changelog',
                          state: 'pending',
            });

            const prHead = pr.data.head.sha;
            core.setOutput("pr_head", prHead);

            const result = await github.request("POST /repos/:owner/:repo/statuses/:sha", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: prHead,
              context: 'release / changelog',
              state: 'pending',
            });

            const { spawnSync } = require("child_process")
            const { status, stderr } = spawnSync(`git fetch origin pull/${pr.data.number}/head:${pr.data.head.ref} && git checkout ${pr.data.head.ref} && git push --set-upstream origin ${pr.data.head.ref}`, {shell: true});

            if (status != 0) {
              core.exportVariable("STATUS", JSON.stringify({ sha: prHead,
                context: 'release / changelog',
                state: 'error',
                description: 'Failed checking out PR branch. See see action log for details',
              }));
              core.setFailed('Failed checking out PR branch.');
            }

      - name: Validate
        id: validation
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            const version = context.payload.comment.body.split(' ')[1]
            core.setOutput("version", version);

            const { spawnSync } = require("child_process");

            const { status, stderr } = spawnSync(`./.github/actions/validate.sh ${version}`, {shell: true});

            if (status != 0) {
                const prHead = "${{ steps.checkout.outputs.pr_head }}";
                core.exportVariable("STATUS", JSON.stringify({ sha: prHead,
                  context: 'release / changelog',
                  state: 'failure',
                  description: 'Failed validating PR content.',
                  details: stderr.toString(),
                }));
                core.setFailed('Validation failed!');
            }

      - name: Generate changelog
        if: success()
        uses: actions/github-script@0.9.0
        env:
          GHC_GITHUB_TOKEN: ${{secrets.GH_RELEASE_TOKEN}}
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            const version = "${{ steps.validation.outputs.version }}";
            const prHead = "${{ steps.checkout.outputs.pr_head }}";

            const { spawnSync } = require("child_process");

            const { status, stderr } = spawnSync(`$(curl -sL http://git.io/install-ghc | bash -s -- --path-only)/ghc generate -r maistra/istio-workspace --format adoc >> docs/modules/ROOT/pages/release_notes/${version}.adoc`, {shell: true});

            if (status != 0) {
                core.exportVariable("status", JSON.stringify({ sha: prHead,
                  context: 'release / changelog',
                  state: 'failure',
                  description: 'Failed validating PR content.',
                  details: stderr.toString(),
                }));
                core.setFailed('Failed generating changelog');
            } else {
              const { status, stderr, stdout } = spawnSync(`git add . && git commit -m"release: adds changelog for ${version}" && git push && git rev-parse --short HEAD`, {shell: true});
              if (status != 0) {
                  core.exportVariable("STATUS", JSON.stringify({ sha: prHead,
                    context: 'release / changelog',
                    state: 'error',
                    description: 'Failed committing release changelog.',
                  }));
                  core.setFailed(`Failed committing changelog`);
              }
            }

      - name: Release commits
        if: success()
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            const version = "${{ steps.validation.outputs.version }}";

            const { spawnSync } = require("child_process");

            const { status, stderr} = spawnSync(`./.github/actions/release.sh -v ${version}`, {shell: true});

            if (status != 0) {
              core.setFailed(`Release failed!`);
            } else {
              const prHead = "${{ steps.checkout.outputs.pr_head }}";
              core.exportVariable("STATUS", JSON.stringify({ sha: prHead,
                context: 'release / changelog',
                state: 'success',
                description: 'Additional release-related commits created',
              }));
            }
      - name: Publish job status
        if: always()
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            const status = ${{env.STATUS}};

            const result = await github.request("POST /repos/:owner/:repo/statuses/:sha", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: status.sha,
              context: status.context,
              state: status.state,
              description: status.description,
              target_url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
            });

            if (!!!status.details) {
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: status.details,
              });
            }

  shipit:
    if: |
      startsWith(github.event.comment.body, '/shipit')
      && (contains(github.event.comment.author_association, 'MEMBER')
          || contains(github.event.comment.author_association, 'OWNER')
          || contains(github.event.comment.author_association, 'COLLABORATOR'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Rebase on master
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            github.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    merge_method: 'rebase'
            }).then(() => {
                const result = await github.request("POST /repos/:owner/:repo/statuses/:sha", {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  context: 'release / shipit',
                  state: 'success',
                  description: 'New version has been shipped!',
                });
            }).catch((data) => {
                const result = await github.request("POST /repos/:owner/:repo/statuses/:sha", {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  context: 'release / shipit',
                  state: 'success',
                  description: `${data.message}`,
                });
                core.setFailed('Merge failed!');
            });
