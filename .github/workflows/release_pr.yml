name: Release Pull Request

on:
  issue_comment:
    types: created

jobs:
  prepare_release:
    if: |
      startsWith(github.event.comment.body, '/release')
      && (contains(github.event.comment.author_association, 'MEMBER')
          || contains(github.event.comment.author_association, 'OWNER')
          || contains(github.event.comment.author_association, 'COLLABORATOR'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set GitHub user
        env:
          GIT_USER: ${{secrets.GIT_USER}}
          GIT_EMAIL: ${{secrets.GIT_EMAIL}}
        run: |
          git config --local user.name "${GIT_USER}"
          git config --local user.email "${GIT_EMAIL}"
      - name: Mark status
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            console.log(context);
            const result = await github.request("POST /repos/:owner/:repo/statuses/:sha", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.head_ref,
              context: 'release / changelog',
              state: 'pending',
            });
            console.log(result);

      - name: Checkout PR branch
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            const { spawnSync } = require("child_process")

            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const { status, stderr } = spawnSync(`git fetch origin pull/${pr.data.number}/head:${pr.data.head.ref} && git checkout ${pr.data.head.ref} && git push --set-upstream origin ${pr.data.head.ref}`, {shell: true});

            if (status != 0) {
                github.checks.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: 'release / changelog',
                    status: 'completed',
                    conclusion: 'failure',
                    head_sha: context.sha,
                    output: {
                      title: `ðŸ›‘ðŸ˜­ Failed checking out PR branch. ${stderr.toString()}`
                    },
                })
                core.setFailed(`Failed checking out PR branch. ${stderr.toString()}`);
            }
      - name: Validate
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            version = context.payload.comment.body.split(' ')[1]

            const { spawnSync } = require("child_process");

            const { status, stderr } = spawnSync(`./.github/actions/validate.sh ${version}`, {shell: true});

            if (status != 0) {
                const { data }
                github.checks.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: 'release / changelog',
                    status: 'completed',
                    conclusion: 'failure',
                    head_sha: context.sha,
                    output: {
                      title: `ðŸ›‘ðŸ˜­ ${stderr.toString()}`
                    },
                })
                core.setFailed('Validation failed!');
            }

      - name: Generate changelog
        if: success()
        uses: actions/github-script@0.9.0
        env:
          GHC_GITHUB_TOKEN: ${{secrets.GH_RELEASE_TOKEN}}
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            version = context.payload.comment.body.split(' ')[1]

            const { spawnSync } = require("child_process");

            const { status, stderr } = spawnSync(`$(curl -sL http://git.io/install-ghc | bash -s -- --path-only)/ghc generate -r maistra/istio-workspace --format adoc >> docs/modules/ROOT/pages/release_notes/${version}.adoc`, {shell: true});

            if (status != 0) {
                github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `ðŸ¤¦ðŸ˜­\n\n${stderr.toString()}`
                });
                core.setFailed('Failed generating changelog');
            } else {
              const { status, stderr, stdout } = spawnSync(`git add . && git commit -m"release: adds changelog for ${version}" && git push && git rev-parse --short HEAD`, {shell: true});
              if (status != 0) {
                  github.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: `ðŸ¤¦ðŸ˜­\n\n${error}\n\n${stderr.toString()}`
                  });
                  core.setFailed('Failed committing changelog');
              }
            }

      - name: Release commits
        if: success()
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            version = context.payload.comment.body.split(' ')[1]

            const { spawnSync } = require("child_process");

            const {status, stderr} = spawnSync(`./.github/actions/release.sh -v ${version}`, {shell: true});

            if (status != 0) {
                github.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: `ðŸ›‘ðŸ˜­ ${stderr.toString()}`
                });
                core.setFailed('Release failed!');
            } else {
                // TODO status
            }
      ### Temporary
      - name: Comment about action failure
        if: failure()
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤· ðŸ¤¦ Failed generating changelog. Please check details in the GitHub action.'
            });

  shipit:
    if: |
      startsWith(github.event.comment.body, '/shipit')
      && (contains(github.event.comment.author_association, 'MEMBER')
          || contains(github.event.comment.author_association, 'OWNER')
          || contains(github.event.comment.author_association, 'COLLABORATOR'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Rebase on master
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GH_RELEASE_TOKEN}}
          script: |
            github.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    merge_method: 'rebase'
            }).then(() => {
                github.checks.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: 'release / shipit',
                    status: 'completed',
                    conclusion: 'success',
                    head_sha: context.sha,
                    output: {
                      title: `ðŸŽ‡ ðŸŽ‰ ðŸŽ† New version has been shipped! ðŸš€ðŸš€ðŸš€`
                    },
                })
            }).catch((data) => {
                github.checks.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: 'release / shipit',
                    status: 'completed',
                    conclusion: 'failure',
                    head_sha: context.sha,
                    output: {
                      title: `ðŸ›‘ðŸ˜­ ${data.message}`
                    },
                })
                core.setFailed('Merge failed!');
            });
